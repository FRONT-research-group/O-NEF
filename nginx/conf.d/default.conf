server {
    listen 80;
    server_name _;
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;

    # SSL certificate paths
    ssl_certificate      /etc/nginx/certs/self_signed_nef.pem;
    ssl_certificate_key  /etc/nginx/certs/private_nef.pem;

    # Optional: Uncomment these lines if you are using client certificates
    # ssl_client_certificate /etc/nginx/certs/.crt;
    # ssl_verify_client      optional;

    # Main location block for HTTP requests
    location / {
        # Optional: Uncomment this if you want to enforce client certificate verification
        # if ( != SUCCESS) {
        #     return 403;
        # }
        proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
        proxy_pass http://nef:80;  # Forward requests to the FastAPI application
    }      

    # WebSocket endpoint
    location /ws/ues {
        proxy_pass http://nef:80/ws/ues;  # FastAPI WebSocket endpoint
        proxy_http_version 1.1;  # Use HTTP/1.1 for WebSocket connections
        proxy_set_header Upgrade $http_upgrade;  # Upgrade header for WebSocket
        proxy_set_header Connection "upgrade";    # Connection header for WebSocket
        proxy_set_header Host $host;               # Host header
        proxy_set_header X-Real-IP $remote_addr;  # Real IP header
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forwarded for header
        proxy_set_header X-Forwarded-Proto $scheme;  # Protocol header
        proxy_cache_bypass $http_upgrade;  # Bypass caching for WebSocket
    }
}

